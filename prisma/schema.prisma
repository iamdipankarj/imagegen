generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String     @id @unique @default(cuid())
  name             String?
  email            String?    @unique
  emailVerified    DateTime?
  stripeCustomerId String?    @unique
  credits          Int        @default(5)
  image            String?
  accounts         Account[]
  sessions         Session[]
  purchases        Purchase[]
  rooms            Room[]

  // @@unique([id, email, stripeCustomerId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Room {
  id          String   @id @unique @default(cuid())
  replicateId String
  inputImage  String
  outputImage String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  prompt      String
  email       String
  user        User     @relation(fields: [email], references: [id], onDelete: Cascade)

  @@unique([replicateId, email])
}

model Purchase {
  id              String   @id @unique @default(cuid())
  stripePaymentId String   @unique
  amount          Int
  creditsReceived Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  email           String
  user            User     @relation(fields: [email], references: [id], onDelete: Cascade)
}
